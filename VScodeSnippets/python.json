{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"mpl plot": {
	"prefix": "mpl.plot",
	"body": [
	"import os",
	"import sys",
	"import numpy as np",
	"import sympy as sp",
	"import matplotlib as mpl",
	"import matplotlib.pyplot as plt",
	"import matplotlib.ticker as ticker",
	"mpl.use(\"pgf\")",
	"os.environ[\"PATH\"] += os.pathsep + '/usr/local/texlive/2021/bin/universal-darwin'",
	"",	
	"plt.style.use(['nord-light','mhoTex'])",
	"",
	"fig = plt.figure()",
	"ax = fig.add_subplot(1,1,1)",
	"",
	"# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
	"# EDIT MAX MIN VALUES",
	"xMin = -10",
	"xMax = 30",
	"yMin = -10",
	"yMax = 30",
	"# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
	"",
	"# Normalize the x-coordinate of the y-axis",
	"midPxNorm = (0 - xMin)/(xMax - xMin) + 0.04",
	"",
	"# Setup the x and y limits",
	"ax.set_xlim(xMin,xMax)",
	"ax.set_ylim(yMin,yMax)",
	"",
	"# y-Axes Spine Customizations",
	"ax.yaxis.set_label_coords(midPxNorm,1.05) # Absolute Coordinates where (0,0) Bottom-Left (1,1) Top-Right",
	"ax.set_ylabel(r\"\\$y\\$\",rotation=\"horizontal\")",
	"ax.yaxis.set_label_position(\"right\")",
	"ax.yaxis.set_ticks_position(\"left\")",
	"",
	"# x-Axes Spine Customizations",
	"ax.set_xlabel(r\"\\$x\\$\")",
	"xlabel = ax.xaxis.get_label()",
	"lpos = xlabel.get_position()",
	"xlabel.set_position((1.04, lpos[1]))",
	"ax.xaxis.set_ticks_position(\"bottom\")",
	"",
	"# Relocate Spines",
	"ax.spines[\"left\"].set_position(\"zero\")",
	"ax.spines[\"bottom\"].set_position(\"zero\")",
	"ax.spines[\"right\"].set_visible(False)",
	"ax.spines[\"top\"].set_visible(False)",
	"",
	"# Remove 0 from both axis at the origin",
	"func = lambda x, pos: \"\" if np.isclose(x,0) else int(x)",
	"plt.gca().xaxis.set_major_formatter(ticker.FuncFormatter(func))",
	"plt.gca().yaxis.set_major_formatter(ticker.FuncFormatter(func))",
	"",
	"# Major ticks every 20, minor ticks every 5",
	"#major_ticks_x = np.arange(-4, 4, 1)",
	"#minor_ticks_x = np.arange(-4, 3, 1)",
	"",
	"#major_ticks_y = np.arange(-4, 9, 1)",
	"#minor_ticks_y = np.arange(-4, 8, 1)",
	"",
	"#ax.set_xticks(major_ticks_x)",
	"#ax.set_xticks(minor_ticks_x, minor=True)",
	"#ax.set_yticks(major_ticks_y)",
	"#ax.set_yticks(minor_ticks_y, minor=True)",
	"",
	"#ax.grid(which='major', linestyle=\"dotted\")",
	"#ax.grid(True)",
	"",
	"# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
	"# EDIT FUNCTION DOMAIN AND PLOTS",
	"x = np.arange(xMin, xMax, 0.01)",
	"#ax.plot([0],[0],'o', markersize=12)",
	"#ax.plot(x,x + 4)",
	"#ax.plot([xMin,yMin],[xMax,yMax],visible=False)",
	"#ax.annotate(\"\\$y\\$-intercept\",xy=(0, 0), xytext=(-8, 3), arrowprops=dict( connectionstyle=\"arc3,rad=0.3\",arrowstyle=\"fancy\",shrinkB=5))",
	"# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
	"",
	"# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
	"# SAVE FILE",
	"fname = os.path.splitext(os.path.basename(sys.argv[0]))[0] ",
	"plt.savefig(fname+'.pdf')",
	"# =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=",
	],
	"description": "Log output to console"
	}
}